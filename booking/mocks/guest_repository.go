// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/loxt/hotel-booking/booking/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// GuestRepository is an autogenerated mock type for the GuestRepository type
type GuestRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: guest
func (_m *GuestRepository) Create(guest *entities.Guest) error {
	ret := _m.Called(guest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Guest) error); ok {
		r0 = rf(guest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *GuestRepository) Get(id string) (*entities.Guest, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Guest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Guest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Guest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Guest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGuestRepository creates a new instance of GuestRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGuestRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GuestRepository {
	mock := &GuestRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
